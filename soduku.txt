class sg :
	def __init__(self , grid) :
		self.grid = grid
#line ofoghi
	def get_line(self , i) :
		return self.grid[i]
#line amudi
	def get_brd(self , j) :
		return [self.grid[i][j] for i in range(9)]
#box 3 dar 3
	def get_bx(self , i , j) :
		i = i // 3 * 3
		j = j // 3 * 3 
		return self.grid[i + 0][j: j + 3] + self.grid[i + 1][j: j + 3] + self.grid[i + 2][j:j + 3]

# adad hayi k mitavan dar point gozasht
	def get_sug(self , i , j) :
		return set(range(1 , 10)) - set(self.get_line(i) + self.get_brd(j) + self.get_bx(i , j))
#point baad
	def next(self , i ,j):
		j = j + 1
		if j == 9 :
			j = 0
			i = i + 1
		return(i , j)

	def slv(self) :
		self.sudoku_slv(0 , 0)

# hale jadval sudoku
	def sudoku_slv(self , i , j) :
		while self.grid[i][j] != 0 :
			i , j = self.next(i , j)
			if i == 9 :
				return 1
		for x in self.get_sug(i , j) :
			self.grid[i][j] = x
			ni , nj = self.next(i , j)
			if self.sudoku_slv9ni , nj) :
				return 1
		self.grid[i][j] = 0
		return []
#print jadval hal shode
	def print_sudoku(self) :
		for i in self.grid :
			print(i)

# hal hame sudoku ha

def slv_all() :
	sudokus = open('sudokus.txt')
	data = []
	awns = 0
	for line in sudokus :
		if line.startswith('sdk') :
			continue
		data.append(list(map(int , line.strip())))
		if len(data) < 9 :
			continue
		sudokus_grid = sg(data)
		sudokus_grid.slv()
		a , b , c = sudoku_grid.grid[0][:3]
		res = a * 100 + b * 10 + c
		awns += res
		for ss in data :
			print(ss)
			print('_____________________')
		data=[]
	print(awns)
slv_all()